@startuml trino-bios-design
title Isima bi(OS) plugin for Trino - class design

left to right direction
' top to bottom direction

class BiosConfig << (P, orange) >> {
    + URI url
    + String email
    + String password
}

class BiosClient {
    # @Inject Cons (BiosConfig, JsonCodec catalogCodec)
    - url, email, password, Map schemas
    + getSchemaNames ()
    + getTableNames (String schema)
    + BiosTable getTable (schema, tableName)
}

interface ColumnHandle {
    + hashCode ()
    + equals (Object)
}

class BiosColumnHandle << (J, orangeRed) >> implements ColumnHandle {
    + Cons (columnName, columnType, isKey)
    - String columnName
    - Type columnType
    - boolean isKey
}

interface Connector {
    beginTransaction ()
    getMetadata (session, txHandle)
    getSplitManager ()
    getRecordSetProvider ()
    shutdown ()
}

class BiosConnector implements Connector {
    # @Inject Cons (lifeCycleManager, metadata, splitManager, recordSetProvider)
}

interface ConnectorFactory {
    getName ()
    create (catalogName, config, context)
}

class BiosConnectorFactory implements ConnectorFactory {
}

interface ConnectorMetadata {
    listSchemaNames (session)
    getTableHandle (session, tableName)
    getTableMetadata (session, table)
    listTables (session, optionalSchemaName)
    getColumnHandles (session, tableHandle)
    listTableColumns (session, prefix)
    getColumnMetadata (session, tableHandle, columnHandle)
    getTableProperties (session, table)
}

class BiosMetadata implements ConnectorMetadata{
    # @Inject Cons (biosClient)
    - getTableMetadata (session, schemaTableName)
    - listTables (session, prefix)
}

interface Module {
  configure (binder)
}

class BiosModule implements Module {
}

interface Plugin {
    getConnectorFactories()
}

class BiosPlugin implements Plugin {
}

interface RecordCursor {
    getType (int field)
    getBoolean (int field)
    get... (int field)
    isNull (int field)
    advanceNextPosition ()
    close ()
    getCompletedBytes ()
    getReadTimeNanos ()
}

class BiosRecordCursor implements RecordCursor {
    + Cons (columnHandles)
    - getFieldValue (int field)
}

interface RecordSet {
    getColumnTypes ()
    cursor ()
}

class BiosRecordSet implements RecordSet {
    + Cons (biosSplit, columnHandles)
}

interface ConnectorRecordSetProvider {
    getRecordSet (transaction, session, split, table, columns)
}

class BiosRecordSetProvider implements ConnectorRecordSetProvider {
}

interface ConnectorSplit {
    isRemotelyAccessible ()
    getAddresses ()
    getInfo ()
}

class BiosSplit implements ConnectorSplit {
    + Cons (tableName)
    + getTableName ()
}

interface ConnectorSplitManager {
    getSplits
    (transaction, session, tableHandle, splitSchedulingStrategy, dynamicFilter, constraint)
}

'ConnectorSplitManager::getSplits --> BiosSplit

class BiosSplitManager implements ConnectorSplitManager {
    # @Inject Cons (biosClient)
}

enum BiosTableKind {
    SIGNAL
    CONTEXT
}

class BiosTable << (P, orange) >> {
    + Cons (kind, name)
    - kind
    - tableHandle
    - columns
}

class BiosTableHandle << (J, orangeRed) >> implements ConnectorTableHandle {
    + Cons (schemaName, tableName)
    - schemaName
    - tableName
    + toSchemaTableName ()
}

class BiosTransactionHandle implements ConnectorTransactionHandle {
    + INSTANCE
}

class ConnectorTableMetadata << (P, orange) >> {
    - SchemaTableName
    - List<ColumnMetadata>
    - properties
    - comment
}


entity Process_Initialization
Process_Initialization --> Module
Process_Initialization --> Plugin
Process_Initialization --> ConnectorFactory
Process_Initialization --> BiosClient
Process_Initialization --> BiosMetadata
Process_Initialization --> BiosSplitManager
Process_Initialization --> BiosConnector
BiosConnectorFactory ..> BiosConfig
BiosClient ..> BiosConfig

entity Show_Schemas
Show_Schemas --> Connector
Show_Schemas --> ConnectorMetadata
BiosMetadata ..> BiosClient
BiosClient ..> BiosTable
BiosTable ..> BiosTableKind
BiosTable ..> BiosTableHandle
BiosTable ..> BiosColumnHandle

entity Show_Tables
Show_Tables --> ConnectorMetadata

entity StartSelect
StartSelect --> ConnectorMetadata
StartSelect --> ConnectorTransactionHandle
StartSelect --> ConnectorTableHandle
StartSelect --> ColumnHandle
StartSelect --> ConnectorSplitManager
StartSelect --> ConnectorSplit
StartSelect --> ConnectorRecordSetProvider
StartSelect --> RecordSet
BiosMetadata ..> ConnectorTableMetadata

entity RetrieveData
RetrieveData --> RecordCursor


Process_Initialization .[hidden]> Show_Schemas
Show_Schemas .[hidden]> Show_Tables
Show_Tables .[hidden]> StartSelect
StartSelect .[hidden]> RetrieveData

BiosModule .[hidden]> BiosPlugin
BiosPlugin .[hidden]> BiosConnectorFactory
BiosConnectorFactory .[hidden]> BiosClient

BiosClient .[hidden]> BiosMetadata
BiosMetadata .[hidden]> BiosSplitManager
BiosSplitManager .[hidden]> BiosConnector


ConnectorMetadata .[hidden]> ConnectorTransactionHandle
ConnectorTransactionHandle .[hidden]> ConnectorTableHandle
ConnectorTableHandle .[hidden]> ColumnHandle
ColumnHandle .[hidden]> ConnectorSplitManager
ConnectorSplitManager .[hidden]> ConnectorSplit
ConnectorSplit .[hidden]> ConnectorRecordSetProvider
ConnectorRecordSetProvider .[hidden]> RecordSet



newpage
title Legend

interface Interface1 {
    + function1() - implemented by Bios class
}

class Class implements Interface1 {
    + Cons () - Constructor
    - privateVariable
    + publicVariable
    - privateFunction()
    + publicFunction()
}

class POJO << (P, orange) >> {
    + Cons () - Constructor
    - gettable member
    + gettable and settable member
}

class JsonPOJO << (J, orangeRed) >> {
    + Cons () - Constructor
    - gettable member
    + gettable and settable member
}

@enduml
