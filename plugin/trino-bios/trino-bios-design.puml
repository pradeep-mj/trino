@startuml trino-bios-design
title Isima bi(OS) plugin for Trino - class design

left to right direction
skinparam shadowing false

skinparam class {
    BackgroundColor<<Trino>> white
    BorderColor<<Trino>> gray
    BorderColor<<Singleton>> black
    BorderThickness<<Singleton>> 3
    BackgroundColor<<Major>> moccasin
    FontSize<<Major>> 15
}

interface Module <<Trino>> {
  configure (binder)
}

class BiosModule implements Module {
}

interface Plugin <<Trino>> {
    getConnectorFactories()
}

class BiosPlugin implements Plugin {
}

interface ConnectorFactory <<Trino>> {
    getName ()
    create (catalogName, config, context)
}

class BiosConnectorFactory implements ConnectorFactory {
}

interface Connector <<Trino>> {
    beginTransaction ()
    getMetadata ()
    getSplitManager ()
    getRecordSetProvider ()
    shutdown ()
}

class BiosConnector <<Singleton>> implements Connector {
    # @Inject Cons (metadata, splitManager, recordSetProvider)
}


interface ConnectorMetadata <<Trino>> {
    listSchemaNames ()
    getTableHandle ()
    getTableMetadata ()
    listTables ()
    getColumnHandles ()
    listTableColumns ()
    getColumnMetadata ()
    getTableProperties ()
    applyFilter ()
}

class BiosMetadata <<Singleton>> <<Major>> implements ConnectorMetadata {
    # @Inject Cons (biosClient)
    - getTableMetadata (schemaTableName)
    - listTables (session, prefix)
}

class ConnectorTableMetadata << (P, orange) >> <<Trino>> {
    - SchemaTableName
    - List<ColumnMetadata>
    - properties
    - comment
}

interface ConnectorTransactionHandle <<Trino>>

class BiosTransactionHandle implements ConnectorTransactionHandle {
    + INSTANCE
}

interface ConnectorSplitManager <<Trino>> {
    getSplits ()
}

class BiosSplitManager <<Singleton>> implements ConnectorSplitManager {
    # @Inject Cons (biosClient)
}

interface ConnectorSplit <<Trino>> {
    isRemotelyAccessible ()
    getAddresses ()
    getInfo ()
}

class BiosSplit implements ConnectorSplit {
    + Cons (tableName)
    + getTableName ()
}

interface ConnectorRecordSetProvider <<Trino>> {
    getRecordSet (split, table, columns)
}

class BiosRecordSetProvider <<Singleton>> implements ConnectorRecordSetProvider {
    # @Inject Cons (biosClient)
}

interface RecordSet <<Trino>> {
    getColumnTypes ()
    cursor ()
}

class BiosRecordSet implements RecordSet {
    + Cons (biosSplit, columnHandles)
}

interface RecordCursor <<Trino>> {
    getType (int field)
    getBoolean (int field)
    get... (int field)
    isNull (int field)
    advanceNextPosition ()
    close ()
    getCompletedBytes ()
    getReadTimeNanos ()
}

class BiosRecordCursor <<Major>> implements RecordCursor {
    + Cons (client, statement, columnHandles)
    - biosclient
    - statement
    - columnHandles
    - records
    - currentRecord
}


class BiosClient <<Singleton>> <<Major>> {
    # @Inject Cons (BiosConfig)
    - biosConfig
    - session
    + getSchemaNames ()
    + getTableNames (String schema)
    + getTableHandle (schema, tableName)
    + getColumnHandles (schema, tableName)
    + execute(statement)
}

class BiosConfig << (P, orange) >> {
    + URI url;
    + ** String email; **
    + ** String password; **
    + Long defaultTimeRangeDeltaSeconds;
    + Long metadataCacheSeconds;
    + Long dataCacheSeconds;
    + Long dataAlignmentSeconds;
    + Long dataCacheSizeInRows;
}

interface ConnectorTableHandle <<Trino>>

class BiosTableHandle << (J, orangeRed) >> implements ConnectorTableHandle {
    + Cons (...)
    - String schemaName
    - String tableName
    - Long timeRangeStart
    - Long timeRangeDelta
    + toSchemaTableName ()
}

interface ColumnHandle <<Trino>> {
    + hashCode ()
    + equals (Object)
}

class BiosColumnHandle << (J, orangeRed) >> implements ColumnHandle {
    + Cons (...)
    - String columnName
    - Type columnType
    - String defaultValue
    - boolean isKey
    - boolean isRecordTimestamp
    + getColumnMetadata ()
}

enum BiosTableKind {
    CONTEXT
    SIGNAL
    RAW_SIGNAL
}

class BiosStatement << (J, orangeRed) >> {
    + Cons (...)
    - String tableKind
    - String tableName
    - String[] attributes
    - Long timeRangeStart
    - Long timeRangeDelta
}


entity Process_Initialization <<Trino>>
Process_Initialization --> Module
Process_Initialization --> Plugin
Process_Initialization --> ConnectorFactory
Process_Initialization --> Connector
BiosClient ..> BiosConfig

entity Show_Schemas <<Trino>>
Show_Schemas --> Connector
Show_Schemas --> ConnectorMetadata
BiosClient ..> BiosStatement
BiosClient ..> BiosTableKind
BiosClient ..> BiosTableHandle
BiosClient ..> BiosColumnHandle

entity Show_Tables <<Trino>>
Show_Tables --> ConnectorMetadata

entity StartSelect <<Trino>>
StartSelect --> ConnectorMetadata
StartSelect --> ConnectorTransactionHandle
StartSelect --> ConnectorTableHandle
StartSelect --> ColumnHandle
StartSelect --> ConnectorSplitManager
StartSelect --> ConnectorSplit
StartSelect --> ConnectorRecordSetProvider
StartSelect --> RecordSet
BiosMetadata ..> ConnectorTableMetadata

entity RetrieveData <<Trino>>
RetrieveData --> RecordCursor


Process_Initialization .[hidden]> Show_Schemas
Show_Schemas .[hidden]> Show_Tables
Show_Tables .[hidden]> StartSelect
StartSelect .[hidden]> RetrieveData

Module .[hidden]> Plugin
Plugin .[hidden]> ConnectorFactory
ConnectorFactory .[hidden]> Connector
Connector .[hidden]> ConnectorMetadata
ConnectorMetadata .[hidden]> ConnectorTransactionHandle
ConnectorTransactionHandle .[hidden]> ConnectorTableHandle
ConnectorTableHandle .[hidden]> ColumnHandle
ColumnHandle .[hidden]> ConnectorSplitManager
ConnectorSplitManager .[hidden]> ConnectorSplit
ConnectorSplit .[hidden]> ConnectorRecordSetProvider
ConnectorRecordSetProvider .[hidden]> RecordSet


BiosMetadata --> BiosClient
BiosRecordCursor --> BiosClient

BiosSplitManager -> BiosSplit
BiosRecordSetProvider -> BiosRecordSet
BiosRecordSet -> BiosRecordCursor


BiosConfig .[hidden]> BiosTableHandle


newpage
title Legend

interface Interface1 {
    + function1() - implemented by Bios class
}

class Class implements Interface1 {
    + Cons () - Constructor
    - privateVariable
    + publicVariable
    - privateFunction()
    + publicFunction()
}

class POJO << (P, orange) >> {
    + Cons () - Constructor
    - gettable member
    + gettable and settable member
}

class JsonPOJO << (J, orangeRed) >> {
    + Cons () - Constructor
    - gettable member
    + gettable and settable member
}

@enduml
